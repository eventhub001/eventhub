{"ast":null,"code":"export var IFeedbackStatus;\n(function (IFeedbackStatus) {\n  IFeedbackStatus[\"success\"] = \"SUCCESS\";\n  IFeedbackStatus[\"error\"] = \"ERROR\";\n  IFeedbackStatus[\"default\"] = \"\";\n})(IFeedbackStatus || (IFeedbackStatus = {}));\nexport var IRoleType;\n(function (IRoleType) {\n  IRoleType[\"admin\"] = \"ROLE_ADMIN\";\n  IRoleType[\"user\"] = \"ROLE_USER\";\n  IRoleType[\"superAdmin\"] = \"ROLE_SUPER_ADMIN\";\n})(IRoleType || (IRoleType = {}));","map":{"version":3,"names":["IFeedbackStatus","IRoleType"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\interfaces\\index.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { Size } from '../test/3dobjects';\r\n\r\nexport interface ILoginResponse {\r\n    accessToken: string;\r\n    expiresIn: number\r\n  }\r\n  \r\n  export interface IResponse<T> {\r\n    data: T;\r\n  }\r\n\r\n  export interface IEventType {\r\n    id?: number;               // Primary key, optional as it's auto-generated\r\n    eventTypeName: string;     // Name of the event type\r\n  }\r\n  \r\n  export interface IEvent {\r\n    id?: number;               // Primary key, optional since it's auto-generated\r\n    userId: number;            // Foreign key referencing the user associated with the event\r\n    eventName: string;         // Name of the event\r\n    eventTypeId: number;       // Foreign key referencing the type of the event\r\n  }\r\n    \r\n\r\n  export interface IRole {\r\n    createdAt: string;\r\n    description: string;\r\n    id: number;\r\n    name : string;\r\n    updatedAt: string;\r\n  }\r\n\r\n  export interface ISearch {\r\n    page?: number;\r\n    size?: number;\r\n    pageNumber?: number;\r\n    pageSize?: number;\r\n    totalElements?: number;\r\n    totalPages?:number;\r\n  }\r\n  \r\n  export interface IUser {\r\n    id?: number;\r\n    name?: string;\r\n    lastname?: string;\r\n    email?: string;\r\n    password?: string;\r\n    active?: boolean;\r\n    createdAt?: string;\r\n    updatedAt?: string;\r\n    authorities?: IAuthority[];\r\n    role?: IRole\r\n  }\r\n  \r\n  export interface IAuthority {\r\n    authority: string;\r\n  }\r\n  \r\n  export interface IFeedBackMessage {\r\n    type?: IFeedbackStatus;\r\n    message?: string;\r\n  }\r\n  \r\n  export enum IFeedbackStatus {\r\n    success = \"SUCCESS\",\r\n    error = \"ERROR\",\r\n    default = ''\r\n  }\r\n  \r\n  export enum IRoleType {\r\n    admin = \"ROLE_ADMIN\",\r\n    user = \"ROLE_USER\",\r\n    superAdmin = 'ROLE_SUPER_ADMIN'\r\n  }\r\n\r\nexport interface AssetModel {\r\n    modelPath: string;\r\n    modelImgPath: string;\r\n    id: number;\r\n    posx: number;\r\n    posy: number;\r\n    posz: number;\r\n    width: number;\r\n    height: number; \r\n}\r\n\r\nexport interface AssetTexture {\r\n    texture_path: string;\r\n    id: number;\r\n}\r\n\r\nexport type Orientation = {\r\n    front: THREE.Vector3,\r\n    back: THREE.Vector3,\r\n    left: THREE.Vector3,\r\n    right: THREE.Vector3,\r\n    top: THREE.Vector3,\r\n    bottom: THREE.Vector3\r\n}\r\n\r\nexport interface Asset {\r\n    id: number;\r\n    url: string | undefined;\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    initialOrientation: Orientation;\r\n\r\n    orientation: Orientation;\r\n    // this can be a composed object, the event should have N amounnts of assets to add.\r\n    content: THREE.Object3D;\r\n    size: Size;\r\n\r\n\r\n    clone: () => Asset;\r\n}"],"mappings":"AAgEE,WAAYA,eAIX;AAJD,WAAYA,eAAe;EACzBA,eAAA,uBAAmB;EACnBA,eAAA,mBAAe;EACfA,eAAA,gBAAY;AACd,CAAC,EAJWA,eAAe,KAAfA,eAAe;AAM3B,WAAYC,SAIX;AAJD,WAAYA,SAAS;EACnBA,SAAA,wBAAoB;EACpBA,SAAA,sBAAkB;EAClBA,SAAA,mCAA+B;AACjC,CAAC,EAJWA,SAAS,KAATA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}