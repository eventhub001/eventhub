{"ast":null,"code":"import { HttpClient, HttpParams } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class BaseService {\n  constructor() {\n    this.http = inject(HttpClient);\n  }\n  find(id) {\n    return this.http.get(this.source + '/' + id);\n  }\n  findCustomSource(customUrlSource) {\n    return this.http.get(`${this.source}/${customUrlSource}`);\n  }\n  findAll() {\n    return this.http.get(this.source);\n  }\n  findAllWithParams(params = {}) {\n    return this.http.get(this.source, {\n      params: this.buildUrlParams(params)\n    });\n  }\n  findAllWithParamsAndCustomSource(customUrlSource, params = {}) {\n    return this.http.get(`${this.source}/${customUrlSource}`, {\n      params: this.buildUrlParams(params)\n    });\n  }\n  add(data) {\n    return this.http.post(this.source, data);\n  }\n  addWithParams(params = {}, data) {\n    return this.http.post(this.source, data, {\n      params: this.buildUrlParams(params)\n    });\n  }\n  addCustomSource(customUrlSource, data) {\n    return this.http.post(`${this.source}/${customUrlSource}`, data);\n  }\n  edit(id, data) {\n    return this.http.put(this.source + '/' + id, data);\n  }\n  editCustomSource(customUrlSource, data) {\n    return this.http.put(`${this.source}/${customUrlSource}`, data);\n  }\n  del(id) {\n    return this.http.delete(this.source + '/' + id);\n  }\n  delCustomSource(customUrlSource) {\n    return this.http.delete(`${this.source}/${customUrlSource}`);\n  }\n  buildUrlParams(params = {}) {\n    let queryParams = new HttpParams();\n    Object.keys(params).forEach(key => {\n      queryParams = queryParams.append(key, params[key]);\n    });\n    return queryParams;\n  }\n  static {\n    this.ɵfac = function BaseService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || BaseService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BaseService,\n      factory: BaseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpClient","HttpParams","inject","BaseService","constructor","http","find","id","get","source","findCustomSource","customUrlSource","findAll","findAllWithParams","params","buildUrlParams","findAllWithParamsAndCustomSource","add","data","post","addWithParams","addCustomSource","edit","put","editCustomSource","del","delete","delCustomSource","queryParams","Object","keys","forEach","key","append","factory","ɵfac","providedIn"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\services\\base-service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { IResponse } from '../interfaces';\r\nimport { Injectable, inject } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BaseService<T> {\r\n  protected source!: string;\r\n  protected http = inject(HttpClient);\r\n\r\n  public find(id: string | number): Observable<IResponse<T>> {\r\n    return this.http.get<IResponse<T>>(this.source + '/' + id);\r\n  }\r\n\r\n  public findCustomSource(customUrlSource: string): Observable<IResponse<T>> {\r\n    return this.http.get<IResponse<T>>(`${this.source}/${customUrlSource}`);\r\n  }\r\n\r\n  public findAll(): Observable<IResponse<T[]>> {\r\n    return this.http.get<IResponse<T[]>>(this.source);\r\n  }\r\n\r\n  public findAllWithParams(params: any = {}): Observable<IResponse<T[]>> {\r\n    return this.http.get<IResponse<T[]>>(this.source, {params: this.buildUrlParams(params)});\r\n  }\r\n\r\n  public findAllWithParamsAndCustomSource(customUrlSource: string, params: any = {}): Observable<IResponse<T[]>> {\r\n    return this.http.get<IResponse<T[]>>(`${this.source}/${customUrlSource}`, {params: this.buildUrlParams(params)});\r\n  }\r\n\r\n  public add(data: {}): Observable<IResponse<T>> {\r\n    return this.http.post<IResponse<T>>(this.source, data);\r\n  }\r\n\r\n  public addWithParams(params: any = {}, data: {}): Observable<IResponse<T>> {\r\n    return this.http.post<IResponse<T>>(this.source, data, {params: this.buildUrlParams(params)});\r\n  }\r\n\r\n  public addCustomSource(customUrlSource: string, data: {}): Observable<IResponse<T>> {\r\n    return this.http.post<IResponse<T>>(`${this.source}/${customUrlSource}`, data);\r\n  }\r\n\r\n  public edit(id: number | undefined, data: {}): Observable<IResponse<T>> {\r\n    return this.http.put<IResponse<T>>(this.source + '/' + id, data);\r\n  }\r\n\r\n  public editCustomSource(customUrlSource: string, data: {}): Observable<IResponse<T>> {\r\n    return this.http.put<IResponse<T>>(`${this.source}/${customUrlSource}`, data);\r\n  }\r\n\r\n  public del(id: any): Observable<IResponse<T>> {\r\n    return this.http.delete<IResponse<T>>(this.source + '/' + id);\r\n  }\r\n  \r\n  public delCustomSource(customUrlSource: string): Observable<IResponse<T>> {\r\n    return this.http.delete<IResponse<T>>(`${this.source}/${customUrlSource}`);\r\n  }\r\n\r\n  public buildUrlParams (params: any = {}) {\r\n    let queryParams = new HttpParams();\r\n    Object.keys(params).forEach(key => {\r\n      queryParams = queryParams.append(key, params[key]);\r\n    })\r\n    return queryParams;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}