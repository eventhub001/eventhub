{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/v-zacharyhe/Documents/GitHub/eventhub/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ThreeDObject } from \"./threeobject.model\";\nimport * as THREE from 'three';\nimport { ModelHandler } from \"../services/modelsHandler\";\nexport class Chair extends ThreeDObject {\n  constructor(id, url, size, content, position, initialorientation) {\n    super(id, position, size, content, initialorientation, url);\n    if (initialorientation) {\n      this.fixOrientation();\n    }\n  }\n  static createFromModel(token, chairid, size, position, http, sides = {\n    front: new THREE.Vector3(0, 0, 1),\n    right: new THREE.Vector3(1, 0, 0),\n    top: new THREE.Vector3(0, 1, 0)\n  }) {\n    return _asyncToGenerator(function* () {\n      // Load the model from the server, and assigns it accordingly.\n      const model = yield ModelHandler.getModelMetadata(token, chairid, http);\n      const chair = yield ModelHandler.loadModel(token, model.modelPath, http);\n      const chairModel = yield ModelHandler.parseGLBFile(chair);\n      chairModel.traverse(child => {\n        if (child instanceof THREE.Mesh) {\n          child.castShadow = true;\n          child.material.side = THREE.FrontSide;\n        }\n      });\n      const newchair = new Chair(chairid, model.modelPath, size, chairModel, position, sides);\n      newchair.resize();\n      return newchair;\n    })();\n  }\n  clone() {\n    return new Chair(this.id, this.url, this.size, this.content.clone(), {\n      x: this.x,\n      y: this.y,\n      z: this.z\n    });\n  }\n}","map":{"version":3,"names":["ThreeDObject","THREE","ModelHandler","Chair","constructor","id","url","size","content","position","initialorientation","fixOrientation","createFromModel","token","chairid","http","sides","front","Vector3","right","top","_asyncToGenerator","model","getModelMetadata","chair","loadModel","modelPath","chairModel","parseGLBFile","traverse","child","Mesh","castShadow","material","side","FrontSide","newchair","resize","clone","x","y","z"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\models\\chair.model.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\r\nimport { AxisOrientation, ModelThreeDObject, Size } from \"../test/3dobjects\";\r\nimport { Position, Side } from \"../test/3dtypes\";\r\nimport { ThreeDObject } from \"./threeobject.model\";\r\nimport * as THREE from 'three';\r\nimport {ModelHandler} from \"../services/modelsHandler\";\r\nimport { AssetModel } from \"../interfaces\";\r\n\r\nexport class Chair extends ThreeDObject {\r\n\r\n    constructor(id: number, url: string, size: Size, content: THREE.Object3D, position: Position, initialorientation?: AxisOrientation) {\r\n        \r\n        super(id, position, size, content, initialorientation, url);\r\n\r\n        if (initialorientation) {\r\n            this.fixOrientation();\r\n        }\r\n    }\r\n\r\n    public static async createFromModel(token: string, chairid: number, size: Size, position: Position, http: HttpClient, sides: AxisOrientation = { front: new THREE.Vector3(0, 0, 1), right: new THREE.Vector3(1, 0, 0), top: new THREE.Vector3(0, 1, 0) }) : Promise<Chair> {\r\n        // Load the model from the server, and assigns it accordingly.\r\n\r\n        const model: AssetModel = await ModelHandler.getModelMetadata(token, chairid, http);\r\n        const chair: Blob = await ModelHandler.loadModel(token, model.modelPath, http);\r\n        \r\n        const chairModel: THREE.Object3D = await ModelHandler.parseGLBFile(chair);\r\n        \r\n        chairModel.traverse((child) => {\r\n            if (child instanceof THREE.Mesh) {\r\n                child.castShadow = true;\r\n                child.material.side = THREE.FrontSide;\r\n            }\r\n        });\r\n\r\n        const newchair = new Chair(chairid, model.modelPath, size, chairModel, position, sides);\r\n        newchair.resize();\r\n\r\n        return newchair;\r\n    }\r\n\r\n    public override clone(): Chair {\r\n        return new Chair(this.id, this.url!, this.size, this.content.clone(), {x: this.x, y: this.y, z: this.z});\r\n    }\r\n}"],"mappings":";AAGA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAQC,YAAY,QAAO,2BAA2B;AAGtD,OAAM,MAAOC,KAAM,SAAQH,YAAY;EAEnCI,YAAYC,EAAU,EAAEC,GAAW,EAAEC,IAAU,EAAEC,OAAuB,EAAEC,QAAkB,EAAEC,kBAAoC;IAE9H,KAAK,CAACL,EAAE,EAAEI,QAAQ,EAAEF,IAAI,EAAEC,OAAO,EAAEE,kBAAkB,EAAEJ,GAAG,CAAC;IAE3D,IAAII,kBAAkB,EAAE;MACpB,IAAI,CAACC,cAAc,EAAE;IACzB;EACJ;EAEO,OAAaC,eAAeA,CAACC,KAAa,EAAEC,OAAe,EAAEP,IAAU,EAAEE,QAAkB,EAAEM,IAAgB,EAAEC,KAAA,GAAyB;IAAEC,KAAK,EAAE,IAAIhB,KAAK,CAACiB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAAEC,KAAK,EAAE,IAAIlB,KAAK,CAACiB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAAEE,GAAG,EAAE,IAAInB,KAAK,CAACiB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;EAAC,CAAE;IAAA,OAAAG,iBAAA;MACpP;MAEA,MAAMC,KAAK,SAAqBpB,YAAY,CAACqB,gBAAgB,CAACV,KAAK,EAAEC,OAAO,EAAEC,IAAI,CAAC;MACnF,MAAMS,KAAK,SAAetB,YAAY,CAACuB,SAAS,CAACZ,KAAK,EAAES,KAAK,CAACI,SAAS,EAAEX,IAAI,CAAC;MAE9E,MAAMY,UAAU,SAAyBzB,YAAY,CAAC0B,YAAY,CAACJ,KAAK,CAAC;MAEzEG,UAAU,CAACE,QAAQ,CAAEC,KAAK,IAAI;QAC1B,IAAIA,KAAK,YAAY7B,KAAK,CAAC8B,IAAI,EAAE;UAC7BD,KAAK,CAACE,UAAU,GAAG,IAAI;UACvBF,KAAK,CAACG,QAAQ,CAACC,IAAI,GAAGjC,KAAK,CAACkC,SAAS;QACzC;MACJ,CAAC,CAAC;MAEF,MAAMC,QAAQ,GAAG,IAAIjC,KAAK,CAACW,OAAO,EAAEQ,KAAK,CAACI,SAAS,EAAEnB,IAAI,EAAEoB,UAAU,EAAElB,QAAQ,EAAEO,KAAK,CAAC;MACvFoB,QAAQ,CAACC,MAAM,EAAE;MAEjB,OAAOD,QAAQ;IAAC;EACpB;EAEgBE,KAAKA,CAAA;IACjB,OAAO,IAAInC,KAAK,CAAC,IAAI,CAACE,EAAE,EAAE,IAAI,CAACC,GAAI,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,OAAO,CAAC8B,KAAK,EAAE,EAAE;MAACC,CAAC,EAAE,IAAI,CAACA,CAAC;MAAEC,CAAC,EAAE,IAAI,CAACA,CAAC;MAAEC,CAAC,EAAE,IAAI,CAACA;IAAC,CAAC,CAAC;EAC5G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}