{"ast":null,"code":"import { inject } from '@angular/core';\nimport { ModelService } from '../../services/model/model.service';\nimport { TestComponent } from '../../test/test.component';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nexport class EventModellerComponent {\n  constructor() {\n    this.title = 'event modeller';\n    this.modelMetadata = [];\n    this.images = [];\n    this.isLoading = true;\n    this.modelService = inject(ModelService);\n    this.modelService.getAll();\n    // Use the signal directly\n    // this.modelMetadata = this.modelService.models$();\n    // this.loadModelData();\n  }\n  loadModelData() {\n    this.modelService.getAll();\n  }\n  loadModelImages(imageFilenames) {\n    const loadPromises = imageFilenames.map(filename => this.modelService.getImg(filename));\n    Promise.all(loadPromises).then(blobs => {\n      console.log(\"Images loaded:\", blobs);\n      return blobs;\n    }).catch(error => {\n      console.error(\"Error loading images:\", error);\n      this.isLoading = false;\n    });\n  }\n  static {\n    this.ɵfac = function EventModellerComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || EventModellerComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: EventModellerComponent,\n      selectors: [[\"app-event-modeller\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 2,\n      consts: [[3, \"modelMetadata\", \"images\"]],\n      template: function EventModellerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-test\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"modelMetadata\", ctx.modelService.models$())(\"images\", ctx.modelService.modelImgs$());\n        }\n      },\n      dependencies: [TestComponent, CommonModule],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["inject","ModelService","TestComponent","CommonModule","EventModellerComponent","constructor","title","modelMetadata","images","isLoading","modelService","getAll","loadModelData","loadModelImages","imageFilenames","loadPromises","map","filename","getImg","Promise","all","then","blobs","console","log","catch","error","selectors","standalone","features","i0","ɵɵStandaloneFeature","decls","vars","consts","template","EventModellerComponent_Template","rf","ctx","ɵɵelement","ɵɵproperty","models$","modelImgs$","styles"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\pages\\eventmodeler\\eventmodeller.component.ts","C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\pages\\eventmodeler\\eventmodeller.component.html"],"sourcesContent":["import { ChangeDetectorRef, Component, effect, inject, Input, OnInit, SimpleChange, SimpleChanges } from '@angular/core';\r\nimport { ModelService } from '../../services/model/model.service';\r\nimport { TestComponent } from '../../test/test.component';\r\nimport { AssetModel } from '../../interfaces';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-event-modeller',\r\n  standalone: true,\r\n  imports: [TestComponent, CommonModule],\r\n  templateUrl: './eventmodeller.component.html',\r\n  styleUrls: ['./eventmodeller.component.scss']\r\n})\r\nexport class EventModellerComponent {\r\n  title = 'event modeller';\r\n  modelMetadata: AssetModel[] = [];\r\n  images: Blob[] = [];\r\n  isLoading: boolean = true;\r\n  modelService: ModelService = inject(ModelService);\r\n\r\n  constructor() {\r\n    this.modelService.getAll();\r\n    // Use the signal directly\r\n    // this.modelMetadata = this.modelService.models$();\r\n    // this.loadModelData();\r\n  }\r\n\r\n\r\n\r\n  loadModelData(): void {\r\n    this.modelService.getAll();\r\n  }\r\n\r\n  loadModelImages(imageFilenames: string[]): void {\r\n    const loadPromises = imageFilenames.map(filename =>\r\n      this.modelService.getImg(filename)\r\n    );\r\n\r\n    Promise.all(loadPromises)\r\n      .then(blobs => {\r\n        console.log(\"Images loaded:\", blobs);\r\n        return blobs;\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error loading images:\", error);\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n}","<app-test\r\n    [modelMetadata]=\"modelService.models$()\"\r\n    [images]=\"modelService.modelImgs$()\"\r\n/>"],"mappings":"AAAA,SAA+CA,MAAM,QAAoD,eAAe;AACxH,SAASC,YAAY,QAAQ,oCAAoC;AACjE,SAASC,aAAa,QAAQ,2BAA2B;AAEzD,SAASC,YAAY,QAAQ,iBAAiB;;AAS9C,OAAM,MAAOC,sBAAsB;EAOjCC,YAAA;IANA,KAAAC,KAAK,GAAG,gBAAgB;IACxB,KAAAC,aAAa,GAAiB,EAAE;IAChC,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,SAAS,GAAY,IAAI;IACzB,KAAAC,YAAY,GAAiBV,MAAM,CAACC,YAAY,CAAC;IAG/C,IAAI,CAACS,YAAY,CAACC,MAAM,EAAE;IAC1B;IACA;IACA;EACF;EAIAC,aAAaA,CAAA;IACX,IAAI,CAACF,YAAY,CAACC,MAAM,EAAE;EAC5B;EAEAE,eAAeA,CAACC,cAAwB;IACtC,MAAMC,YAAY,GAAGD,cAAc,CAACE,GAAG,CAACC,QAAQ,IAC9C,IAAI,CAACP,YAAY,CAACQ,MAAM,CAACD,QAAQ,CAAC,CACnC;IAEDE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC,CACtBM,IAAI,CAACC,KAAK,IAAG;MACZC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;MACpC,OAAOA,KAAK;IACd,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAG;MACbH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAI,CAACjB,SAAS,GAAG,KAAK;IACxB,CAAC,CAAC;EACN;;;uCAlCWL,sBAAsB;IAAA;EAAA;;;YAAtBA,sBAAsB;MAAAuB,SAAA;MAAAC,UAAA;MAAAC,QAAA,GAAAC,EAAA,CAAAC,mBAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCbnCP,EAAA,CAAAS,SAAA,kBAGE;;;UADET,EADA,CAAAU,UAAA,kBAAAF,GAAA,CAAA5B,YAAA,CAAA+B,OAAA,GAAwC,WAAAH,GAAA,CAAA5B,YAAA,CAAAgC,UAAA,GACJ;;;qBDO5BxC,aAAa,EAAEC,YAAY;MAAAwC,MAAA;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}