{"ast":null,"code":"import * as THREE from 'three';\nimport { NMatrix } from './matrices';\nimport { ThreeCalculationUtils } from './vectorutils';\nimport { Side } from './3dtypes';\nexport var EventType;\n(function (EventType) {\n  EventType[EventType[\"Party\"] = 0] = \"Party\";\n  EventType[EventType[\"Wedding\"] = 1] = \"Wedding\";\n  EventType[EventType[\"Birthday\"] = 2] = \"Birthday\";\n  EventType[EventType[\"Conference\"] = 3] = \"Conference\";\n  EventType[EventType[\"Meeting\"] = 4] = \"Meeting\";\n  EventType[EventType[\"Other\"] = 5] = \"Other\";\n})(EventType || (EventType = {}));\nexport var MetricType;\n(function (MetricType) {\n  MetricType[MetricType[\"Meters\"] = 0] = \"Meters\";\n  MetricType[MetricType[\"Feet\"] = 1] = \"Feet\";\n  MetricType[MetricType[\"Inches\"] = 2] = \"Inches\";\n  MetricType[MetricType[\"Centimeters\"] = 3] = \"Centimeters\";\n})(MetricType || (MetricType = {}));\nexport class EventGrid {\n  constructor(width, height, depth, metric) {\n    this.cols = 21;\n    this.floor = 3;\n    this.rows = 10;\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.metric = metric;\n    this.nMatrix = new NMatrix(this.cols, this.floor, this.rows, null);\n    this.model = this.createAsThreeJSObject();\n  }\n  // debugging. Must remove later.\n  createAsThreeJSObject() {\n    // make everything as lines\n    const cube = new THREE.Object3D();\n    const material = new THREE.LineBasicMaterial({\n      color: 0x0000ff\n    });\n    const geometry = new THREE.BoxGeometry(this.width, this.height, this.depth);\n    const edges = new THREE.EdgesGeometry(geometry);\n    const line = new THREE.LineSegments(edges, material);\n    cube.position.y += this.height / 2;\n    const furthestPointx = cube.position.x - this.width / 2;\n    const furthestPointz = cube.position.z - this.depth / 2;\n    const furthestPointy = cube.position.y - this.height / 2;\n    // make the grid\n    for (let i = 0; i < this.cols; i++) {\n      for (let j = 0; j < this.rows; j++) {\n        for (let k = 0; k < this.floor; k++) {\n          const material = new THREE.LineDashedMaterial({\n            color: 0x0000ff,\n            linewidth: 1,\n            scale: 3,\n            dashSize: 0.5,\n            gapSize: 1\n          });\n          //const material = new THREE.LineBasicMaterial({color: 0x0000ff});\n          const geometry = new THREE.BoxGeometry(this.width / this.cols, this.height / this.floor, this.depth / this.rows);\n          const edges = new THREE.EdgesGeometry(geometry);\n          const lineS = new THREE.LineSegments(edges, material);\n          lineS.computeLineDistances();\n          material.transparent = true;\n          material.opacity = 0.2;\n          lineS.position.x = furthestPointx + i * (this.width / this.cols) + this.width / this.cols / 2;\n          lineS.position.z = furthestPointz + j * (this.depth / this.rows) + this.depth / this.rows / 2;\n          lineS.position.y = furthestPointy + k * (this.height / this.floor) + this.height / this.floor / 2 - this.height / 2;\n          cube.add(lineS);\n        }\n      }\n    }\n    cube.add(line);\n    return cube;\n  }\n  hide() {\n    if (this.model !== undefined) {\n      this.model.visible = false;\n    }\n  }\n  calculateDimensionTaken(asset) {\n    const positionAsset = ThreeCalculationUtils.getAbsolutePosition(asset);\n    if (this.model === undefined) {\n      throw new Error(\"Grid model is not defined. Please make sure to create the grid model first.\");\n    }\n    const positionGrid = ThreeCalculationUtils.getAbsolutePosition(this.model);\n    const fixedPositionAsset = positionAsset.map(point => {\n      return new THREE.Vector3(point.x - positionGrid[0].x, point.y - positionGrid[0].y, point.z - positionGrid[0].z);\n    });\n    let indexpos = [];\n    for (let i = 0; i < fixedPositionAsset.length; i++) {\n      const ix1 = Math.floor(fixedPositionAsset[i].x / (this.width / this.cols));\n      const iy1 = Math.floor(fixedPositionAsset[i].y / (this.height / this.floor));\n      const iz1 = Math.floor(fixedPositionAsset[i].z / (this.depth / this.rows));\n      indexpos.push([ix1, iy1, iz1]);\n    }\n    return indexpos;\n  }\n  getPosMatrix(x, y, z) {\n    if (this.model === undefined) {\n      throw new Error(\"Grid model is not defined. Please make sure to create the grid model first.\");\n    }\n    const positionGrid = ThreeCalculationUtils.getAbsolutePosition(this.model);\n    const positionPoint = new THREE.Vector3(positionGrid[0].x + this.width / this.cols * x, positionGrid[0].y + this.height / this.cols * y, positionGrid[0].z + this.depth / this.rows * z);\n    return positionPoint;\n  }\n  get(x, y, z) {\n    return this.nMatrix.get(x, y, z);\n  }\n  placeAssetTo(threeobject, x, y, z, side1, side2) {\n    // move to a specific place in the grid, the numbers must be integers and always moves it to the center.\n    if (side1 === side2 && side1 !== Side.CENTER) {\n      throw new Error(\"You need to specify two different sides for sides different than 'CENTER'.\");\n    }\n    const boxInGridPos = this.getPosMatrix(x, y, z);\n    const positionAsset = ThreeCalculationUtils.getAbsolutePosition(threeobject.content);\n    const assetBoundingBox = new THREE.Box3().setFromObject(threeobject.content);\n    const boxSize = assetBoundingBox.getSize(new THREE.Vector3());\n    const boxWidth = this.width / this.cols;\n    const boxHeight = this.height / this.floor;\n    const boxDepth = this.depth / this.rows;\n    //if (side1 === Side.CENTER || side2 === Side.CENTER) {\n    threeobject.content.position.x = boxInGridPos.x + boxWidth / 2;\n    threeobject.content.position.y = boxInGridPos.y + boxHeight / 2;\n    threeobject.content.position.z = boxInGridPos.z + boxDepth / 2;\n    //}\n    if (side1 === Side.BOTTOM || side2 === Side.BOTTOM) {\n      threeobject.content.position.y = boxInGridPos.y + boxSize.y / 2;\n    }\n    if (side1 === Side.BACK || side2 === Side.BACK) {\n      threeobject.content.position.x = boxInGridPos.x + boxSize.x / 2;\n    }\n    if (side1 === Side.LEFT || side2 === Side.LEFT) {\n      threeobject.content.position.z = boxInGridPos.z + boxSize.z / 2;\n    }\n    // if the object is located at the edge of the event then fix so it doesn't go out of the grid.\n    if (x === 0 && boxSize.x > boxWidth) {\n      threeobject.content.position.x = boxInGridPos.x + boxSize.x / 2;\n    }\n    if (z === 0 && boxSize.z > boxDepth) {\n      threeobject.content.position.z = boxInGridPos.z + boxSize.z / 2;\n    }\n    return threeobject;\n  }\n}\nexport class Event {\n  constructor(type) {\n    this.type = type;\n  }\n  getType() {\n    return this.type;\n  }\n  setType(type) {\n    this.type = type;\n  }\n  toString() {\n    return this.type;\n  }\n}","map":{"version":3,"names":["THREE","NMatrix","ThreeCalculationUtils","Side","EventType","MetricType","EventGrid","constructor","width","height","depth","metric","cols","floor","rows","nMatrix","model","createAsThreeJSObject","cube","Object3D","material","LineBasicMaterial","color","geometry","BoxGeometry","edges","EdgesGeometry","line","LineSegments","position","y","furthestPointx","x","furthestPointz","z","furthestPointy","i","j","k","LineDashedMaterial","linewidth","scale","dashSize","gapSize","lineS","computeLineDistances","transparent","opacity","add","hide","undefined","visible","calculateDimensionTaken","asset","positionAsset","getAbsolutePosition","Error","positionGrid","fixedPositionAsset","map","point","Vector3","indexpos","length","ix1","Math","iy1","iz1","push","getPosMatrix","positionPoint","get","placeAssetTo","threeobject","side1","side2","CENTER","boxInGridPos","content","assetBoundingBox","Box3","setFromObject","boxSize","getSize","boxWidth","boxHeight","boxDepth","BOTTOM","BACK","LEFT","Event","type","getType","setType","toString"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\test\\events.ts"],"sourcesContent":["import * as THREE from 'three';\r\nimport { NMatrix } from './matrices';\r\nimport { ThreeCalculationUtils } from './vectorutils';\r\nimport { ThreeDObject } from '../models/threeobject.model';\r\nimport { Asset } from '../interfaces';\r\nimport { Side } from './3dtypes';\r\n\r\nexport enum EventType {\r\n    Party,\r\n    Wedding,\r\n    Birthday,\r\n    Conference,\r\n    Meeting,\r\n    Other\r\n}\r\n\r\nexport enum MetricType {\r\n    Meters,\r\n    Feet,\r\n    Inches,\r\n    Centimeters\r\n}\r\n\r\nexport class EventGrid {\r\n    nMatrix: NMatrix<ThreeDObject>;\r\n    cols: number;\r\n    floor: number;\r\n    rows: number;\r\n    width: number;\r\n    height: number;\r\n    depth: number;\r\n    metric: MetricType;\r\n    model: THREE.Object3D;\r\n\r\n    constructor(width: number, height: number, depth: number, metric: MetricType) {\r\n        this.cols = 21;\r\n        this.floor = 3;\r\n        this.rows = 10;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n        this.metric = metric;\r\n        this.nMatrix = new NMatrix<ThreeDObject>(this.cols, this.floor, this.rows, null);\r\n\r\n        this.model = this.createAsThreeJSObject();\r\n    }\r\n\r\n    // debugging. Must remove later.\r\n    public createAsThreeJSObject() : THREE.Object3D {\r\n        // make everything as lines\r\n        const cube = new THREE.Object3D();\r\n        const material = new THREE.LineBasicMaterial({color: 0x0000ff});\r\n        const geometry = new THREE.BoxGeometry(this.width, this.height, this.depth);\r\n        const edges = new THREE.EdgesGeometry(geometry);\r\n        const line = new THREE.LineSegments(edges, material);\r\n        cube.position.y += this.height / 2;\r\n\r\n        const furthestPointx = cube.position.x - this.width / 2;\r\n        const furthestPointz = cube.position.z - this.depth / 2;\r\n        const furthestPointy = cube.position.y - this.height / 2;\r\n\r\n        // make the grid\r\n        for (let i = 0; i < this.cols; i++) {\r\n            for (let j = 0; j < this.rows; j++) {\r\n                for (let k = 0; k < this.floor; k++) {\r\n                    const material = new THREE.LineDashedMaterial({\r\n                        color: 0x0000ff,\r\n                        linewidth: 1,\r\n                        scale: 3,\r\n                        dashSize: 0.5,\r\n                        gapSize: 1,});\r\n                    //const material = new THREE.LineBasicMaterial({color: 0x0000ff});\r\n                    const geometry = new THREE.BoxGeometry((this.width / this.cols), (this.height / this.floor), (this.depth / this.rows));\r\n                    const edges = new THREE.EdgesGeometry(geometry);\r\n                    const lineS = new THREE.LineSegments(edges, material);\r\n                    lineS.computeLineDistances();\r\n                    material.transparent = true;\r\n                    material.opacity = 0.2;\r\n                    lineS.position.x = furthestPointx + i * (this.width / this.cols) + (this.width / this.cols) / 2;\r\n                    lineS.position.z = furthestPointz + j * (this.depth / this.rows) + (this.depth / this.rows) / 2;\r\n                    lineS.position.y = furthestPointy + k * (this.height / this.floor) + (this.height / this.floor) / 2 - this.height / 2;\r\n                    cube.add(lineS);\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        cube.add(line);\r\n\r\n        return cube;\r\n    }\r\n\r\n    public hide() {\r\n        if (this.model !== undefined) {\r\n            this.model.visible = false;\r\n        }\r\n    }\r\n\r\n    public calculateDimensionTaken(asset: THREE.Object3D) : number[][] {\r\n        const positionAsset = ThreeCalculationUtils.getAbsolutePosition(asset);\r\n        if (this.model === undefined) {\r\n            throw new Error(\"Grid model is not defined. Please make sure to create the grid model first.\");\r\n        }\r\n\r\n        const positionGrid = ThreeCalculationUtils.getAbsolutePosition(this.model);\r\n\r\n        const fixedPositionAsset = positionAsset.map((point) => {\r\n            return new THREE.Vector3(point.x - positionGrid[0].x, point.y - positionGrid[0].y, point.z - positionGrid[0].z);\r\n        })\r\n\r\n        let indexpos: number[][] = [];\r\n        for (let i = 0; i < fixedPositionAsset.length; i++) {\r\n            const ix1 = Math.floor(fixedPositionAsset[i].x / (this.width / this.cols));\r\n            const iy1 = Math.floor(fixedPositionAsset[i].y / (this.height / this.floor));\r\n            const iz1 = Math.floor(fixedPositionAsset[i].z / (this.depth / this.rows));\r\n            \r\n            indexpos.push([ix1, iy1, iz1]);\r\n        }\r\n        \r\n        return indexpos;\r\n    }\r\n\r\n    private getPosMatrix(x: number, y: number, z: number) {\r\n\r\n        if (this.model === undefined) {\r\n            throw new Error(\"Grid model is not defined. Please make sure to create the grid model first.\");\r\n        }\r\n\r\n        const positionGrid = ThreeCalculationUtils.getAbsolutePosition(this.model);\r\n        const positionPoint = new THREE.Vector3(\r\n            positionGrid[0].x + (this.width / this.cols) * x,\r\n            positionGrid[0].y + (this.height / this.cols) * y,\r\n            positionGrid[0].z + (this.depth / this.rows) * z\r\n        );\r\n\r\n        return positionPoint;\r\n\r\n    }\r\n\r\n    public get(x: number, y: number, z: number) {\r\n        return this.nMatrix.get(x, y, z);\r\n    }\r\n\r\n    public placeAssetTo(threeobject: Asset, x: number, y: number, z: number, side1: Side, side2: Side) {\r\n        // move to a specific place in the grid, the numbers must be integers and always moves it to the center.\r\n        if (side1 === side2 && side1 !== Side.CENTER) {\r\n            throw new Error(\"You need to specify two different sides for sides different than 'CENTER'.\");\r\n        }\r\n        \r\n        const boxInGridPos = this.getPosMatrix(x, y, z);\r\n\r\n        const positionAsset = ThreeCalculationUtils.getAbsolutePosition(threeobject.content); \r\n        \r\n        const assetBoundingBox = new THREE.Box3().setFromObject(threeobject.content);\r\n        const boxSize = assetBoundingBox.getSize(new THREE.Vector3());\r\n\r\n        const boxWidth = this.width / this.cols;\r\n        const boxHeight = this.height / this.floor;\r\n        const boxDepth = this.depth / this.rows;\r\n        //if (side1 === Side.CENTER || side2 === Side.CENTER) {\r\n        threeobject.content.position.x = boxInGridPos.x + boxWidth / 2;\r\n        threeobject.content.position.y = boxInGridPos.y + boxHeight / 2;\r\n        threeobject.content.position.z = boxInGridPos.z + boxDepth / 2;\r\n        //}\r\n\r\n        if (side1 === Side.BOTTOM || side2 === Side.BOTTOM) {\r\n            threeobject.content.position.y = boxInGridPos.y + (boxSize.y / 2);\r\n        }\r\n\r\n        if (side1 === Side.BACK || side2 === Side.BACK) {\r\n            threeobject.content.position.x = boxInGridPos.x + (boxSize.x / 2);\r\n        }\r\n\r\n        if (side1 === Side.LEFT || side2 === Side.LEFT) {\r\n            threeobject.content.position.z = boxInGridPos.z + (boxSize.z / 2);\r\n        }\r\n\r\n        // if the object is located at the edge of the event then fix so it doesn't go out of the grid.\r\n        if (x === 0 && boxSize.x > boxWidth) {\r\n            threeobject.content.position.x = boxInGridPos.x + (boxSize.x / 2);\r\n        }\r\n\r\n        if (z === 0 && boxSize.z > boxDepth) {\r\n            threeobject.content.position.z = boxInGridPos.z + (boxSize.z / 2);\r\n        }\r\n\r\n        return threeobject;\r\n    }\r\n\r\n}\r\n\r\nexport class Event {\r\n    type: EventType;\r\n    \r\n    constructor(type: EventType) {\r\n        this.type = type;\r\n    }\r\n\r\n    public getType() {\r\n        return this.type;\r\n    }\r\n\r\n    public setType(type: EventType) {\r\n        this.type = type;\r\n    }\r\n\r\n    public toString() {\r\n        return this.type;\r\n    }\r\n}"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,qBAAqB,QAAQ,eAAe;AAGrD,SAASC,IAAI,QAAQ,WAAW;AAEhC,WAAYC,SAOX;AAPD,WAAYA,SAAS;EACjBA,SAAA,CAAAA,SAAA,wBAAK;EACLA,SAAA,CAAAA,SAAA,4BAAO;EACPA,SAAA,CAAAA,SAAA,8BAAQ;EACRA,SAAA,CAAAA,SAAA,kCAAU;EACVA,SAAA,CAAAA,SAAA,4BAAO;EACPA,SAAA,CAAAA,SAAA,wBAAK;AACT,CAAC,EAPWA,SAAS,KAATA,SAAS;AASrB,WAAYC,UAKX;AALD,WAAYA,UAAU;EAClBA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,sBAAI;EACJA,UAAA,CAAAA,UAAA,0BAAM;EACNA,UAAA,CAAAA,UAAA,oCAAW;AACf,CAAC,EALWA,UAAU,KAAVA,UAAU;AAOtB,OAAM,MAAOC,SAAS;EAWlBC,YAAYC,KAAa,EAAEC,MAAc,EAAEC,KAAa,EAAEC,MAAkB;IACxE,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACN,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACI,OAAO,GAAG,IAAId,OAAO,CAAe,IAAI,CAACW,IAAI,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAAC;IAEhF,IAAI,CAACE,KAAK,GAAG,IAAI,CAACC,qBAAqB,EAAE;EAC7C;EAEA;EACOA,qBAAqBA,CAAA;IACxB;IACA,MAAMC,IAAI,GAAG,IAAIlB,KAAK,CAACmB,QAAQ,EAAE;IACjC,MAAMC,QAAQ,GAAG,IAAIpB,KAAK,CAACqB,iBAAiB,CAAC;MAACC,KAAK,EAAE;IAAQ,CAAC,CAAC;IAC/D,MAAMC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,WAAW,CAAC,IAAI,CAAChB,KAAK,EAAE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACC,KAAK,CAAC;IAC3E,MAAMe,KAAK,GAAG,IAAIzB,KAAK,CAAC0B,aAAa,CAACH,QAAQ,CAAC;IAC/C,MAAMI,IAAI,GAAG,IAAI3B,KAAK,CAAC4B,YAAY,CAACH,KAAK,EAAEL,QAAQ,CAAC;IACpDF,IAAI,CAACW,QAAQ,CAACC,CAAC,IAAI,IAAI,CAACrB,MAAM,GAAG,CAAC;IAElC,MAAMsB,cAAc,GAAGb,IAAI,CAACW,QAAQ,CAACG,CAAC,GAAG,IAAI,CAACxB,KAAK,GAAG,CAAC;IACvD,MAAMyB,cAAc,GAAGf,IAAI,CAACW,QAAQ,CAACK,CAAC,GAAG,IAAI,CAACxB,KAAK,GAAG,CAAC;IACvD,MAAMyB,cAAc,GAAGjB,IAAI,CAACW,QAAQ,CAACC,CAAC,GAAG,IAAI,CAACrB,MAAM,GAAG,CAAC;IAExD;IACA,KAAK,IAAI2B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACxB,IAAI,EAAEwB,CAAC,EAAE,EAAE;MAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACvB,IAAI,EAAEuB,CAAC,EAAE,EAAE;QAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACzB,KAAK,EAAEyB,CAAC,EAAE,EAAE;UACjC,MAAMlB,QAAQ,GAAG,IAAIpB,KAAK,CAACuC,kBAAkB,CAAC;YAC1CjB,KAAK,EAAE,QAAQ;YACfkB,SAAS,EAAE,CAAC;YACZC,KAAK,EAAE,CAAC;YACRC,QAAQ,EAAE,GAAG;YACbC,OAAO,EAAE;WAAG,CAAC;UACjB;UACA,MAAMpB,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,WAAW,CAAE,IAAI,CAAChB,KAAK,GAAG,IAAI,CAACI,IAAI,EAAI,IAAI,CAACH,MAAM,GAAG,IAAI,CAACI,KAAK,EAAI,IAAI,CAACH,KAAK,GAAG,IAAI,CAACI,IAAK,CAAC;UACtH,MAAMW,KAAK,GAAG,IAAIzB,KAAK,CAAC0B,aAAa,CAACH,QAAQ,CAAC;UAC/C,MAAMqB,KAAK,GAAG,IAAI5C,KAAK,CAAC4B,YAAY,CAACH,KAAK,EAAEL,QAAQ,CAAC;UACrDwB,KAAK,CAACC,oBAAoB,EAAE;UAC5BzB,QAAQ,CAAC0B,WAAW,GAAG,IAAI;UAC3B1B,QAAQ,CAAC2B,OAAO,GAAG,GAAG;UACtBH,KAAK,CAACf,QAAQ,CAACG,CAAC,GAAGD,cAAc,GAAGK,CAAC,IAAI,IAAI,CAAC5B,KAAK,GAAG,IAAI,CAACI,IAAI,CAAC,GAAI,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACI,IAAI,GAAI,CAAC;UAC/FgC,KAAK,CAACf,QAAQ,CAACK,CAAC,GAAGD,cAAc,GAAGI,CAAC,IAAI,IAAI,CAAC3B,KAAK,GAAG,IAAI,CAACI,IAAI,CAAC,GAAI,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACI,IAAI,GAAI,CAAC;UAC/F8B,KAAK,CAACf,QAAQ,CAACC,CAAC,GAAGK,cAAc,GAAGG,CAAC,IAAI,IAAI,CAAC7B,MAAM,GAAG,IAAI,CAACI,KAAK,CAAC,GAAI,IAAI,CAACJ,MAAM,GAAG,IAAI,CAACI,KAAK,GAAI,CAAC,GAAG,IAAI,CAACJ,MAAM,GAAG,CAAC;UACrHS,IAAI,CAAC8B,GAAG,CAACJ,KAAK,CAAC;QACnB;MACJ;IAEJ;IAEA1B,IAAI,CAAC8B,GAAG,CAACrB,IAAI,CAAC;IAEd,OAAOT,IAAI;EACf;EAEO+B,IAAIA,CAAA;IACP,IAAI,IAAI,CAACjC,KAAK,KAAKkC,SAAS,EAAE;MAC1B,IAAI,CAAClC,KAAK,CAACmC,OAAO,GAAG,KAAK;IAC9B;EACJ;EAEOC,uBAAuBA,CAACC,KAAqB;IAChD,MAAMC,aAAa,GAAGpD,qBAAqB,CAACqD,mBAAmB,CAACF,KAAK,CAAC;IACtE,IAAI,IAAI,CAACrC,KAAK,KAAKkC,SAAS,EAAE;MAC1B,MAAM,IAAIM,KAAK,CAAC,6EAA6E,CAAC;IAClG;IAEA,MAAMC,YAAY,GAAGvD,qBAAqB,CAACqD,mBAAmB,CAAC,IAAI,CAACvC,KAAK,CAAC;IAE1E,MAAM0C,kBAAkB,GAAGJ,aAAa,CAACK,GAAG,CAAEC,KAAK,IAAI;MACnD,OAAO,IAAI5D,KAAK,CAAC6D,OAAO,CAACD,KAAK,CAAC5B,CAAC,GAAGyB,YAAY,CAAC,CAAC,CAAC,CAACzB,CAAC,EAAE4B,KAAK,CAAC9B,CAAC,GAAG2B,YAAY,CAAC,CAAC,CAAC,CAAC3B,CAAC,EAAE8B,KAAK,CAAC1B,CAAC,GAAGuB,YAAY,CAAC,CAAC,CAAC,CAACvB,CAAC,CAAC;IACnH,CAAC,CAAC;IAEF,IAAI4B,QAAQ,GAAe,EAAE;IAC7B,KAAK,IAAI1B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,kBAAkB,CAACK,MAAM,EAAE3B,CAAC,EAAE,EAAE;MAChD,MAAM4B,GAAG,GAAGC,IAAI,CAACpD,KAAK,CAAC6C,kBAAkB,CAACtB,CAAC,CAAC,CAACJ,CAAC,IAAI,IAAI,CAACxB,KAAK,GAAG,IAAI,CAACI,IAAI,CAAC,CAAC;MAC1E,MAAMsD,GAAG,GAAGD,IAAI,CAACpD,KAAK,CAAC6C,kBAAkB,CAACtB,CAAC,CAAC,CAACN,CAAC,IAAI,IAAI,CAACrB,MAAM,GAAG,IAAI,CAACI,KAAK,CAAC,CAAC;MAC5E,MAAMsD,GAAG,GAAGF,IAAI,CAACpD,KAAK,CAAC6C,kBAAkB,CAACtB,CAAC,CAAC,CAACF,CAAC,IAAI,IAAI,CAACxB,KAAK,GAAG,IAAI,CAACI,IAAI,CAAC,CAAC;MAE1EgD,QAAQ,CAACM,IAAI,CAAC,CAACJ,GAAG,EAAEE,GAAG,EAAEC,GAAG,CAAC,CAAC;IAClC;IAEA,OAAOL,QAAQ;EACnB;EAEQO,YAAYA,CAACrC,CAAS,EAAEF,CAAS,EAAEI,CAAS;IAEhD,IAAI,IAAI,CAAClB,KAAK,KAAKkC,SAAS,EAAE;MAC1B,MAAM,IAAIM,KAAK,CAAC,6EAA6E,CAAC;IAClG;IAEA,MAAMC,YAAY,GAAGvD,qBAAqB,CAACqD,mBAAmB,CAAC,IAAI,CAACvC,KAAK,CAAC;IAC1E,MAAMsD,aAAa,GAAG,IAAItE,KAAK,CAAC6D,OAAO,CACnCJ,YAAY,CAAC,CAAC,CAAC,CAACzB,CAAC,GAAI,IAAI,CAACxB,KAAK,GAAG,IAAI,CAACI,IAAI,GAAIoB,CAAC,EAChDyB,YAAY,CAAC,CAAC,CAAC,CAAC3B,CAAC,GAAI,IAAI,CAACrB,MAAM,GAAG,IAAI,CAACG,IAAI,GAAIkB,CAAC,EACjD2B,YAAY,CAAC,CAAC,CAAC,CAACvB,CAAC,GAAI,IAAI,CAACxB,KAAK,GAAG,IAAI,CAACI,IAAI,GAAIoB,CAAC,CACnD;IAED,OAAOoC,aAAa;EAExB;EAEOC,GAAGA,CAACvC,CAAS,EAAEF,CAAS,EAAEI,CAAS;IACtC,OAAO,IAAI,CAACnB,OAAO,CAACwD,GAAG,CAACvC,CAAC,EAAEF,CAAC,EAAEI,CAAC,CAAC;EACpC;EAEOsC,YAAYA,CAACC,WAAkB,EAAEzC,CAAS,EAAEF,CAAS,EAAEI,CAAS,EAAEwC,KAAW,EAAEC,KAAW;IAC7F;IACA,IAAID,KAAK,KAAKC,KAAK,IAAID,KAAK,KAAKvE,IAAI,CAACyE,MAAM,EAAE;MAC1C,MAAM,IAAIpB,KAAK,CAAC,4EAA4E,CAAC;IACjG;IAEA,MAAMqB,YAAY,GAAG,IAAI,CAACR,YAAY,CAACrC,CAAC,EAAEF,CAAC,EAAEI,CAAC,CAAC;IAE/C,MAAMoB,aAAa,GAAGpD,qBAAqB,CAACqD,mBAAmB,CAACkB,WAAW,CAACK,OAAO,CAAC;IAEpF,MAAMC,gBAAgB,GAAG,IAAI/E,KAAK,CAACgF,IAAI,EAAE,CAACC,aAAa,CAACR,WAAW,CAACK,OAAO,CAAC;IAC5E,MAAMI,OAAO,GAAGH,gBAAgB,CAACI,OAAO,CAAC,IAAInF,KAAK,CAAC6D,OAAO,EAAE,CAAC;IAE7D,MAAMuB,QAAQ,GAAG,IAAI,CAAC5E,KAAK,GAAG,IAAI,CAACI,IAAI;IACvC,MAAMyE,SAAS,GAAG,IAAI,CAAC5E,MAAM,GAAG,IAAI,CAACI,KAAK;IAC1C,MAAMyE,QAAQ,GAAG,IAAI,CAAC5E,KAAK,GAAG,IAAI,CAACI,IAAI;IACvC;IACA2D,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACG,CAAC,GAAG6C,YAAY,CAAC7C,CAAC,GAAGoD,QAAQ,GAAG,CAAC;IAC9DX,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACC,CAAC,GAAG+C,YAAY,CAAC/C,CAAC,GAAGuD,SAAS,GAAG,CAAC;IAC/DZ,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACK,CAAC,GAAG2C,YAAY,CAAC3C,CAAC,GAAGoD,QAAQ,GAAG,CAAC;IAC9D;IAEA,IAAIZ,KAAK,KAAKvE,IAAI,CAACoF,MAAM,IAAIZ,KAAK,KAAKxE,IAAI,CAACoF,MAAM,EAAE;MAChDd,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACC,CAAC,GAAG+C,YAAY,CAAC/C,CAAC,GAAIoD,OAAO,CAACpD,CAAC,GAAG,CAAE;IACrE;IAEA,IAAI4C,KAAK,KAAKvE,IAAI,CAACqF,IAAI,IAAIb,KAAK,KAAKxE,IAAI,CAACqF,IAAI,EAAE;MAC5Cf,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACG,CAAC,GAAG6C,YAAY,CAAC7C,CAAC,GAAIkD,OAAO,CAAClD,CAAC,GAAG,CAAE;IACrE;IAEA,IAAI0C,KAAK,KAAKvE,IAAI,CAACsF,IAAI,IAAId,KAAK,KAAKxE,IAAI,CAACsF,IAAI,EAAE;MAC5ChB,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACK,CAAC,GAAG2C,YAAY,CAAC3C,CAAC,GAAIgD,OAAO,CAAChD,CAAC,GAAG,CAAE;IACrE;IAEA;IACA,IAAIF,CAAC,KAAK,CAAC,IAAIkD,OAAO,CAAClD,CAAC,GAAGoD,QAAQ,EAAE;MACjCX,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACG,CAAC,GAAG6C,YAAY,CAAC7C,CAAC,GAAIkD,OAAO,CAAClD,CAAC,GAAG,CAAE;IACrE;IAEA,IAAIE,CAAC,KAAK,CAAC,IAAIgD,OAAO,CAAChD,CAAC,GAAGoD,QAAQ,EAAE;MACjCb,WAAW,CAACK,OAAO,CAACjD,QAAQ,CAACK,CAAC,GAAG2C,YAAY,CAAC3C,CAAC,GAAIgD,OAAO,CAAChD,CAAC,GAAG,CAAE;IACrE;IAEA,OAAOuC,WAAW;EACtB;;AAIJ,OAAM,MAAOiB,KAAK;EAGdnF,YAAYoF,IAAe;IACvB,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EAEOC,OAAOA,CAAA;IACV,OAAO,IAAI,CAACD,IAAI;EACpB;EAEOE,OAAOA,CAACF,IAAe;IAC1B,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EAEOG,QAAQA,CAAA;IACX,OAAO,IAAI,CAACH,IAAI;EACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}