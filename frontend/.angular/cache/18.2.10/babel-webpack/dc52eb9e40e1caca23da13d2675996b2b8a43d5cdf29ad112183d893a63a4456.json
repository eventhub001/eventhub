{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/v-zacharyhe/Documents/GitHub/eventhub/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ThreeDObject } from \"./threeobject.model\";\nimport * as THREE from 'three';\nimport { TextureHandler } from \"../services/modelsHandler\";\nexport class Floor extends ThreeDObject {\n  constructor(width, depth, position, url, sides = {\n    front: new THREE.Vector3(1, 0, 0),\n    right: new THREE.Vector3(1, 0, 0),\n    top: new THREE.Vector3(0, 1, 0)\n  }, content) {\n    let model;\n    if (content !== undefined) {\n      model = content;\n    } else {\n      model = content || new THREE.Mesh(new THREE.PlaneGeometry(width, depth), new THREE.MeshPhongMaterial({\n        color: 0x00ff00\n      }));\n    }\n    //model.rotateOnAxis(sides.top, Math.PI / 2);\n    model.rotateOnAxis(sides.right, -(Math.PI / 2));\n    super(0, position, {\n      width: width,\n      height: 0,\n      depth: depth\n    }, model, sides, url);\n    this.width = width;\n    this.depth = depth;\n    //this.fixOrientation();\n  }\n  clone() {\n    return new Floor(this.width, this.depth, {\n      x: this.x,\n      y: this.y,\n      z: this.z\n    }, this.url, this.initialOrientation, this.content.clone());\n  }\n  static createFromModel(width, height, token, floorid, position, http, sides = {\n    front: new THREE.Vector3(0, 0, 1),\n    right: new THREE.Vector3(1, 0, 0),\n    top: new THREE.Vector3(0, 1, 0)\n  }) {\n    return _asyncToGenerator(function* () {\n      const model = yield TextureHandler.getTextureMetadata(token, floorid, http);\n      const chair = yield TextureHandler.loadTextureBlob(token, model.texture_path, http);\n      const chairTexture = yield TextureHandler.parseTextureBlob(chair);\n      const modelMesh = new THREE.Mesh(new THREE.PlaneGeometry(width, height), new THREE.MeshPhongMaterial({\n        map: chairTexture\n      }));\n      modelMesh.receiveShadow = true;\n      const newchair = new Floor(width, height, position, model.texture_path, sides, modelMesh);\n      //newchair.resize();\n      return newchair;\n    })();\n  }\n}","map":{"version":3,"names":["ThreeDObject","THREE","TextureHandler","Floor","constructor","width","depth","position","url","sides","front","Vector3","right","top","content","model","undefined","Mesh","PlaneGeometry","MeshPhongMaterial","color","rotateOnAxis","Math","PI","height","clone","x","y","z","initialOrientation","createFromModel","token","floorid","http","_asyncToGenerator","getTextureMetadata","chair","loadTextureBlob","texture_path","chairTexture","parseTextureBlob","modelMesh","map","receiveShadow","newchair"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\models\\floor.model.ts"],"sourcesContent":["import { ThreeDObject } from \"./threeobject.model\";\r\nimport { Position } from \"../test/3dtypes\";\r\nimport * as THREE from 'three';\r\nimport { AxisOrientation, Size } from \"../test/3dobjects\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { AssetTexture } from \"../interfaces\";\r\nimport { TextureHandler } from \"../services/modelsHandler\";\r\n\r\nexport class Floor extends ThreeDObject {\r\n    \r\n    width: number;\r\n    depth: number;\r\n\r\n    constructor(width: number,\r\n        depth: number,\r\n        position: Position,\r\n        url?: string,\r\n        sides: AxisOrientation = { front: new THREE.Vector3(1, 0, 0), right: new THREE.Vector3(1, 0, 0), top: new THREE.Vector3(0, 1, 0) },\r\n        content?: THREE.Object3D) {\r\n        \r\n        let model: THREE.Mesh;\r\n        if (content !== undefined) {\r\n            model = content as THREE.Mesh;\r\n        }\r\n        else {  \r\n            model = content || new THREE.Mesh(\r\n                new THREE.PlaneGeometry(width, depth),\r\n                new THREE.MeshPhongMaterial({ color: 0x00ff00 })\r\n            );\r\n        }\r\n\r\n        //model.rotateOnAxis(sides.top, Math.PI / 2);\r\n        model.rotateOnAxis(sides.right, -(Math.PI / 2));\r\n\r\n        super(0, position, {width: width, height: 0, depth: depth}, model, sides, url);\r\n        \r\n        this.width = width;\r\n        this.depth = depth;\r\n\r\n        //this.fixOrientation();\r\n    }\r\n\r\n    public override clone(): Floor {\r\n        return new Floor(this.width, this.depth, {x: this.x, y: this.y, z: this.z}, this.url, this.initialOrientation, this.content.clone());\r\n    }\r\n\r\n    public static async createFromModel(\r\n        width: number,\r\n        height: number,\r\n        token: string,\r\n        floorid: number,\r\n        position: Position,\r\n        http: HttpClient,\r\n        sides: AxisOrientation = { front: new THREE.Vector3(0, 0, 1), right: new THREE.Vector3(1, 0, 0), top: new THREE.Vector3(0, 1, 0) }) : Promise<Floor> {\r\n        const model: AssetTexture = await TextureHandler.getTextureMetadata(token, floorid, http);\r\n        const chair: Blob = await TextureHandler.loadTextureBlob(token, model.texture_path, http);\r\n        \r\n        const chairTexture = await TextureHandler.parseTextureBlob(chair);\r\n\r\n        const modelMesh = new THREE.Mesh(\r\n            new THREE.PlaneGeometry(width, height),\r\n            new THREE.MeshPhongMaterial({ map: chairTexture })\r\n        );\r\n\r\n        modelMesh.receiveShadow = true;\r\n\r\n        const newchair = new Floor(width, height, position, model.texture_path, sides, modelMesh);\r\n        //newchair.resize();\r\n\r\n        return newchair;\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}