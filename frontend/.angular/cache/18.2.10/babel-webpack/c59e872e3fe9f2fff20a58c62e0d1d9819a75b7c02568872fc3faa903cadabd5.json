{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/v-zacharyhe/Documents/GitHub/eventhub/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as zim from \"zimjs\";\nexport function blobToImage(_x) {\n  return _blobToImage.apply(this, arguments);\n}\nfunction _blobToImage() {\n  _blobToImage = _asyncToGenerator(function* (blob) {\n    return new Promise((resolve, reject) => {\n      // Create an Object URL for the image Blob\n      const imageUrl = URL.createObjectURL(blob);\n      // Use Bitmap.fromData to load the image\n      zim.Bitmap.fromData(imageUrl, bitmap => {\n        // Clean up the URL after the bitmap is loaded\n        URL.revokeObjectURL(imageUrl);\n        // Center the bitmap if needed\n        // Resolve the promise with the created bitmap\n        resolve(bitmap);\n      });\n    });\n  });\n  return _blobToImage.apply(this, arguments);\n}\nexport function blobsToImages(blobs) {\n  return Promise.all(blobs.map(blob => blobToImage(blob)));\n}\nexport function loadModelImages(blobs) {\n  return Promise.all(blobs.map(model => {\n    return blobToImage(model);\n  }));\n}","map":{"version":3,"names":["zim","blobToImage","_x","_blobToImage","apply","arguments","_asyncToGenerator","blob","Promise","resolve","reject","imageUrl","URL","createObjectURL","Bitmap","fromData","bitmap","revokeObjectURL","blobsToImages","blobs","all","map","loadModelImages","model"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\ui3d\\loader\\fileloader.ts"],"sourcesContent":["import * as zim from \"zimjs\";\r\nimport { AssetModel } from \"../../interfaces\";\r\nimport { ModelService } from \"../../services/model/model.service\";\r\n\r\nexport async function blobToImage(blob: Blob): Promise<zim.Bitmap> {\r\n    return new Promise((resolve, reject) => {\r\n        // Create an Object URL for the image Blob\r\n        const imageUrl = URL.createObjectURL(blob);\r\n\r\n        // Use Bitmap.fromData to load the image\r\n        zim.Bitmap.fromData(imageUrl, (bitmap: zim.Bitmap) => {\r\n            // Clean up the URL after the bitmap is loaded\r\n            URL.revokeObjectURL(imageUrl);\r\n\r\n            // Center the bitmap if needed\r\n            // Resolve the promise with the created bitmap\r\n            resolve(bitmap);\r\n        });\r\n    });\r\n}\r\n\r\nexport function blobsToImages(blobs: Blob[]): Promise<zim.Bitmap[]> {\r\n    return Promise.all(blobs.map(blob => blobToImage(blob)));\r\n}\r\n\r\nexport function loadModelImages(blobs: Blob[]) : Promise<zim.Bitmap[]> {\r\n    return Promise.all(blobs.map((model) => {\r\n        return blobToImage(model);\r\n    }));\r\n}"],"mappings":";AAAA,OAAO,KAAKA,GAAG,MAAM,OAAO;AAI5B,gBAAsBC,WAAWA,CAAAC,EAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAehC,SAAAF,aAAA;EAAAA,YAAA,GAAAG,iBAAA,CAfM,WAA2BC,IAAU;IACxC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC;MACA,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACN,IAAI,CAAC;MAE1C;MACAP,GAAG,CAACc,MAAM,CAACC,QAAQ,CAACJ,QAAQ,EAAGK,MAAkB,IAAI;QACjD;QACAJ,GAAG,CAACK,eAAe,CAACN,QAAQ,CAAC;QAE7B;QACA;QACAF,OAAO,CAACO,MAAM,CAAC;MACnB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EAAA,OAAAb,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,OAAM,SAAUa,aAAaA,CAACC,KAAa;EACvC,OAAOX,OAAO,CAACY,GAAG,CAACD,KAAK,CAACE,GAAG,CAACd,IAAI,IAAIN,WAAW,CAACM,IAAI,CAAC,CAAC,CAAC;AAC5D;AAEA,OAAM,SAAUe,eAAeA,CAACH,KAAa;EACzC,OAAOX,OAAO,CAACY,GAAG,CAACD,KAAK,CAACE,GAAG,CAAEE,KAAK,IAAI;IACnC,OAAOtB,WAAW,CAACsB,KAAK,CAAC;EAC7B,CAAC,CAAC,CAAC;AACP","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}