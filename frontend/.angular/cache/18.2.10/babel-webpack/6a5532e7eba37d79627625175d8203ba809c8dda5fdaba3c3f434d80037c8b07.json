{"ast":null,"code":"import { inject } from '@angular/core';\nimport { IRoleType } from '../interfaces';\nimport { tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.user = {\n      email: '',\n      authorities: []\n    };\n    this.http = inject(HttpClient);\n    this.load();\n  }\n  save() {\n    if (this.user) localStorage.setItem('auth_user', JSON.stringify(this.user));\n    if (this.accessToken) localStorage.setItem('access_token', JSON.stringify(this.accessToken));\n    if (this.expiresIn) localStorage.setItem('expiresIn', JSON.stringify(this.expiresIn));\n  }\n  load() {\n    let token = localStorage.getItem('access_token');\n    if (token) this.accessToken = token;\n    let exp = localStorage.getItem('expiresIn');\n    if (exp) this.expiresIn = JSON.parse(exp);\n    const user = localStorage.getItem('auth_user');\n    if (user) this.user = JSON.parse(user);\n  }\n  getUser() {\n    return this.user;\n  }\n  getAccessToken() {\n    return this.accessToken.replace(/['\"]/g, '');\n    ;\n  }\n  check() {\n    if (!this.accessToken) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  login(credentials) {\n    return this.http.post('auth/login', credentials).pipe(tap(response => {\n      this.accessToken = response.token;\n      this.user.email = credentials.email;\n      this.expiresIn = response.expiresIn;\n      this.user = response.authUser;\n      this.save();\n    }));\n  }\n  hasRole(role) {\n    return this.user.authorities ? this.user?.authorities.some(authority => authority.authority == role) : false;\n  }\n  isSuperAdmin() {\n    return this.user.authorities ? this.user?.authorities.some(authority => authority.authority == IRoleType.superAdmin) : false;\n  }\n  hasAnyRole(roles) {\n    return roles.some(role => this.hasRole(role));\n  }\n  getPermittedRoutes(routes) {\n    let permittedRoutes = [];\n    for (const route of routes) {\n      if (route.data && route.data.authorities) {\n        if (this.hasAnyRole(route.data.authorities)) {\n          permittedRoutes.unshift(route);\n        }\n      }\n    }\n    return permittedRoutes;\n  }\n  signup(user) {\n    return this.http.post('auth/signup', user);\n  }\n  logout() {\n    this.accessToken = '';\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('expiresIn');\n    localStorage.removeItem('auth_user');\n  }\n  getUserAuthorities() {\n    return this.getUser()?.authorities ? this.getUser()?.authorities : [];\n  }\n  areActionsAvailable(routeAuthorities) {\n    // definición de las variables de validación\n    let allowedUser = false;\n    let isAdmin = false;\n    // se obtienen los permisos del usuario\n    let userAuthorities = this.getUserAuthorities();\n    // se valida que sea una ruta permitida para el usuario\n    for (const authority of routeAuthorities) {\n      if (userAuthorities?.some(item => item.authority == authority)) {\n        allowedUser = userAuthorities?.some(item => item.authority == authority);\n      }\n      if (allowedUser) break;\n    }\n    // se valida que el usuario tenga un rol de administración\n    if (userAuthorities?.some(item => item.authority == IRoleType.admin || item.authority == IRoleType.superAdmin)) {\n      isAdmin = userAuthorities?.some(item => item.authority == IRoleType.admin || item.authority == IRoleType.superAdmin);\n    }\n    return allowedUser && isAdmin;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["inject","IRoleType","tap","HttpClient","AuthService","constructor","user","email","authorities","http","load","save","localStorage","setItem","JSON","stringify","accessToken","expiresIn","token","getItem","exp","parse","getUser","getAccessToken","replace","check","login","credentials","post","pipe","response","authUser","hasRole","role","some","authority","isSuperAdmin","superAdmin","hasAnyRole","roles","getPermittedRoutes","routes","permittedRoutes","route","data","unshift","signup","logout","removeItem","getUserAuthorities","areActionsAvailable","routeAuthorities","allowedUser","isAdmin","userAuthorities","item","admin","factory","ɵfac","providedIn"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\r\nimport { IAuthority, ILoginResponse, IResponse, IRoleType, IUser } from '../interfaces';\r\nimport { Observable, firstValueFrom, of, tap } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private accessToken!: string;\r\n  private expiresIn! : number;\r\n  private user: IUser = {email: '', authorities: []};\r\n  private http: HttpClient = inject(HttpClient);\r\n\r\n  constructor() {\r\n    this.load();\r\n  }\r\n\r\n  public save(): void {\r\n    if (this.user) localStorage.setItem('auth_user', JSON.stringify(this.user));\r\n\r\n    if (this.accessToken)\r\n      localStorage.setItem('access_token', JSON.stringify(this.accessToken));\r\n\r\n    if (this.expiresIn)\r\n      localStorage.setItem('expiresIn',JSON.stringify(this.expiresIn));\r\n  }\r\n\r\n  private load(): void {\r\n    let token = localStorage.getItem('access_token');\r\n    if (token) this.accessToken = token;\r\n    let exp = localStorage.getItem('expiresIn');\r\n    if (exp) this.expiresIn = JSON.parse(exp);\r\n    const user = localStorage.getItem('auth_user');\r\n    if (user) this.user = JSON.parse(user);\r\n  }\r\n\r\n  public getUser(): IUser | undefined {\r\n    return this.user;\r\n  }\r\n\r\n  public getAccessToken(): string | null {\r\n    return this.accessToken.replace(/['\"]/g, '');;\r\n  }\r\n\r\n  public check(): boolean {\r\n    if (!this.accessToken){\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  public login(credentials: {\r\n    email: string;\r\n    password: string;\r\n  }): Observable<ILoginResponse> {\r\n    return this.http.post<ILoginResponse>('auth/login', credentials).pipe(\r\n      tap((response: any) => {\r\n        this.accessToken = response.token;\r\n        this.user.email = credentials.email;\r\n        this.expiresIn = response.expiresIn;\r\n        this.user = response.authUser;\r\n        this.save();\r\n      })\r\n    );\r\n  }\r\n\r\n  public hasRole(role: string): boolean {\r\n    return this.user.authorities ?  this.user?.authorities.some(authority => authority.authority == role) : false;\r\n  }\r\n\r\n  public isSuperAdmin(): boolean {\r\n    return this.user.authorities ?  this.user?.authorities.some(authority => authority.authority == IRoleType.superAdmin) : false;\r\n  }\r\n\r\n  public hasAnyRole(roles: any[]): boolean {\r\n    return roles.some(role => this.hasRole(role));\r\n  }\r\n\r\n  public getPermittedRoutes(routes: any[]): any[] {\r\n    let permittedRoutes: any[] = [];\r\n    for (const route of routes) {\r\n      if(route.data && route.data.authorities) {\r\n        if (this.hasAnyRole(route.data.authorities)) {\r\n          permittedRoutes.unshift(route);\r\n        } \r\n      }\r\n    }\r\n    return permittedRoutes;\r\n  }\r\n\r\n  public signup(user: IUser): Observable<ILoginResponse> {\r\n    return this.http.post<ILoginResponse>('auth/signup', user);\r\n  }\r\n\r\n  public logout() {\r\n    this.accessToken = '';\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('expiresIn');\r\n    localStorage.removeItem('auth_user');\r\n  }\r\n\r\n  public getUserAuthorities (): IAuthority[] | undefined {\r\n    return this.getUser()?.authorities ? this.getUser()?.authorities : [];\r\n  }\r\n\r\n  public areActionsAvailable(routeAuthorities: string[]): boolean  {\r\n    // definición de las variables de validación\r\n    let allowedUser: boolean = false;\r\n    let isAdmin: boolean = false;\r\n    // se obtienen los permisos del usuario\r\n    let userAuthorities = this.getUserAuthorities();\r\n    // se valida que sea una ruta permitida para el usuario\r\n    for (const authority of routeAuthorities) {\r\n      if (userAuthorities?.some(item => item.authority == authority)) {\r\n        allowedUser = userAuthorities?.some(item => item.authority == authority)\r\n      }\r\n      if (allowedUser) break;\r\n    }\r\n    // se valida que el usuario tenga un rol de administración\r\n    if (userAuthorities?.some(item => item.authority == IRoleType.admin || item.authority == IRoleType.superAdmin)) {\r\n      isAdmin = userAuthorities?.some(item => item.authority == IRoleType.admin || item.authority == IRoleType.superAdmin);\r\n    }\r\n    return allowedUser && isAdmin;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAoB,eAAe;AAClD,SAAgDC,SAAS,QAAe,eAAe;AACvF,SAAyCC,GAAG,QAAQ,MAAM;AAC1D,SAASC,UAAU,QAAQ,sBAAsB;;AAKjD,OAAM,MAAOC,WAAW;EAMtBC,YAAA;IAHQ,KAAAC,IAAI,GAAU;MAACC,KAAK,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAE,CAAC;IAC1C,KAAAC,IAAI,GAAeT,MAAM,CAACG,UAAU,CAAC;IAG3C,IAAI,CAACO,IAAI,EAAE;EACb;EAEOC,IAAIA,CAAA;IACT,IAAI,IAAI,CAACL,IAAI,EAAEM,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACT,IAAI,CAAC,CAAC;IAE3E,IAAI,IAAI,CAACU,WAAW,EAClBJ,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,WAAW,CAAC,CAAC;IAExE,IAAI,IAAI,CAACC,SAAS,EAChBL,YAAY,CAACC,OAAO,CAAC,WAAW,EAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACE,SAAS,CAAC,CAAC;EACpE;EAEQP,IAAIA,CAAA;IACV,IAAIQ,KAAK,GAAGN,YAAY,CAACO,OAAO,CAAC,cAAc,CAAC;IAChD,IAAID,KAAK,EAAE,IAAI,CAACF,WAAW,GAAGE,KAAK;IACnC,IAAIE,GAAG,GAAGR,YAAY,CAACO,OAAO,CAAC,WAAW,CAAC;IAC3C,IAAIC,GAAG,EAAE,IAAI,CAACH,SAAS,GAAGH,IAAI,CAACO,KAAK,CAACD,GAAG,CAAC;IACzC,MAAMd,IAAI,GAAGM,YAAY,CAACO,OAAO,CAAC,WAAW,CAAC;IAC9C,IAAIb,IAAI,EAAE,IAAI,CAACA,IAAI,GAAGQ,IAAI,CAACO,KAAK,CAACf,IAAI,CAAC;EACxC;EAEOgB,OAAOA,CAAA;IACZ,OAAO,IAAI,CAAChB,IAAI;EAClB;EAEOiB,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACP,WAAW,CAACQ,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;IAAC;EAC/C;EAEOC,KAAKA,CAAA;IACV,IAAI,CAAC,IAAI,CAACT,WAAW,EAAC;MACpB,OAAO,KAAK;IACd,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF;EAEOU,KAAKA,CAACC,WAGZ;IACC,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAiB,YAAY,EAAED,WAAW,CAAC,CAACE,IAAI,CACnE3B,GAAG,CAAE4B,QAAa,IAAI;MACpB,IAAI,CAACd,WAAW,GAAGc,QAAQ,CAACZ,KAAK;MACjC,IAAI,CAACZ,IAAI,CAACC,KAAK,GAAGoB,WAAW,CAACpB,KAAK;MACnC,IAAI,CAACU,SAAS,GAAGa,QAAQ,CAACb,SAAS;MACnC,IAAI,CAACX,IAAI,GAAGwB,QAAQ,CAACC,QAAQ;MAC7B,IAAI,CAACpB,IAAI,EAAE;IACb,CAAC,CAAC,CACH;EACH;EAEOqB,OAAOA,CAACC,IAAY;IACzB,OAAO,IAAI,CAAC3B,IAAI,CAACE,WAAW,GAAI,IAAI,CAACF,IAAI,EAAEE,WAAW,CAAC0B,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACA,SAAS,IAAIF,IAAI,CAAC,GAAG,KAAK;EAC/G;EAEOG,YAAYA,CAAA;IACjB,OAAO,IAAI,CAAC9B,IAAI,CAACE,WAAW,GAAI,IAAI,CAACF,IAAI,EAAEE,WAAW,CAAC0B,IAAI,CAACC,SAAS,IAAIA,SAAS,CAACA,SAAS,IAAIlC,SAAS,CAACoC,UAAU,CAAC,GAAG,KAAK;EAC/H;EAEOC,UAAUA,CAACC,KAAY;IAC5B,OAAOA,KAAK,CAACL,IAAI,CAACD,IAAI,IAAI,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC,CAAC;EAC/C;EAEOO,kBAAkBA,CAACC,MAAa;IACrC,IAAIC,eAAe,GAAU,EAAE;IAC/B,KAAK,MAAMC,KAAK,IAAIF,MAAM,EAAE;MAC1B,IAAGE,KAAK,CAACC,IAAI,IAAID,KAAK,CAACC,IAAI,CAACpC,WAAW,EAAE;QACvC,IAAI,IAAI,CAAC8B,UAAU,CAACK,KAAK,CAACC,IAAI,CAACpC,WAAW,CAAC,EAAE;UAC3CkC,eAAe,CAACG,OAAO,CAACF,KAAK,CAAC;QAChC;MACF;IACF;IACA,OAAOD,eAAe;EACxB;EAEOI,MAAMA,CAACxC,IAAW;IACvB,OAAO,IAAI,CAACG,IAAI,CAACmB,IAAI,CAAiB,aAAa,EAAEtB,IAAI,CAAC;EAC5D;EAEOyC,MAAMA,CAAA;IACX,IAAI,CAAC/B,WAAW,GAAG,EAAE;IACrBJ,YAAY,CAACoC,UAAU,CAAC,cAAc,CAAC;IACvCpC,YAAY,CAACoC,UAAU,CAAC,WAAW,CAAC;IACpCpC,YAAY,CAACoC,UAAU,CAAC,WAAW,CAAC;EACtC;EAEOC,kBAAkBA,CAAA;IACvB,OAAO,IAAI,CAAC3B,OAAO,EAAE,EAAEd,WAAW,GAAG,IAAI,CAACc,OAAO,EAAE,EAAEd,WAAW,GAAG,EAAE;EACvE;EAEO0C,mBAAmBA,CAACC,gBAA0B;IACnD;IACA,IAAIC,WAAW,GAAY,KAAK;IAChC,IAAIC,OAAO,GAAY,KAAK;IAC5B;IACA,IAAIC,eAAe,GAAG,IAAI,CAACL,kBAAkB,EAAE;IAC/C;IACA,KAAK,MAAMd,SAAS,IAAIgB,gBAAgB,EAAE;MACxC,IAAIG,eAAe,EAAEpB,IAAI,CAACqB,IAAI,IAAIA,IAAI,CAACpB,SAAS,IAAIA,SAAS,CAAC,EAAE;QAC9DiB,WAAW,GAAGE,eAAe,EAAEpB,IAAI,CAACqB,IAAI,IAAIA,IAAI,CAACpB,SAAS,IAAIA,SAAS,CAAC;MAC1E;MACA,IAAIiB,WAAW,EAAE;IACnB;IACA;IACA,IAAIE,eAAe,EAAEpB,IAAI,CAACqB,IAAI,IAAIA,IAAI,CAACpB,SAAS,IAAIlC,SAAS,CAACuD,KAAK,IAAID,IAAI,CAACpB,SAAS,IAAIlC,SAAS,CAACoC,UAAU,CAAC,EAAE;MAC9GgB,OAAO,GAAGC,eAAe,EAAEpB,IAAI,CAACqB,IAAI,IAAIA,IAAI,CAACpB,SAAS,IAAIlC,SAAS,CAACuD,KAAK,IAAID,IAAI,CAACpB,SAAS,IAAIlC,SAAS,CAACoC,UAAU,CAAC;IACtH;IACA,OAAOe,WAAW,IAAIC,OAAO;EAC/B;;;uCArHWjD,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAqD,OAAA,EAAXrD,WAAW,CAAAsD,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}