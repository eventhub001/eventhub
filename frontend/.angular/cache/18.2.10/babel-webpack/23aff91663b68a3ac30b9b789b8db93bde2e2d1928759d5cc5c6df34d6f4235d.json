{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/v-zacharyhe/Documents/GitHub/eventhub/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from \"rxjs\";\nimport * as THREE from 'three';\nimport { ModelThreeDObject } from \"../test/3dobjects\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nexport class ModelHandler {\n  static getModelMetadata(token, id, http) {\n    return _asyncToGenerator(function* () {\n      // TODO: Load model from server\n      const url = `http://localhost:8080/models/${id}`;\n      // bearer token\n      const bearer = token;\n      const headers = {\n        Authorization: `Bearer ${bearer}`\n      };\n      const blob = yield firstValueFrom(http.get(url, {\n        headers,\n        responseType: 'json'\n      }));\n      return blob;\n    })();\n  }\n  static loadModel(token, url, http) {\n    return _asyncToGenerator(function* () {\n      // Load the model\n      const get_url = `http://localhost:8080/models/files/model/${url}`;\n      const bearer = token;\n      const headers = {\n        Authorization: `Bearer ${bearer}`\n      };\n      const blob = yield firstValueFrom(http.get(get_url, {\n        headers,\n        responseType: 'blob'\n      }));\n      return blob;\n    })();\n  }\n  static parseGLBFile(blob) {\n    return _asyncToGenerator(function* () {\n      const loader = new GLTFLoader();\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const arrayBuffer = reader.result;\n          loader.parse(arrayBuffer, '', gltf => {\n            const gltfScene = gltf.scene;\n            const chair = ModelThreeDObject.fromGLTF(gltfScene, true);\n            const parentDS = chair.pivot;\n            // move to the 0 position.\n            //parentDS.position.y = 1.4;\n            resolve(parentDS); // Resolve with the THREE.Object3D\n          }, error => {\n            console.error(error);\n            reject(error); // Reject if there is an error during parsing\n          });\n        };\n        reader.onerror = error => {\n          console.error(error);\n          reject(error); // Reject if there is an error in reading the file\n        };\n        reader.readAsArrayBuffer(blob);\n      });\n    })();\n  }\n}\nexport class TextureHandler {\n  static getTextureMetadata(token, id, http) {\n    return _asyncToGenerator(function* () {\n      // TODO: Load texture metadata from the server\n      const url = `http://localhost:8080/textures/${id}`;\n      const bearer = token;\n      const headers = {\n        Authorization: `Bearer ${bearer}`\n      };\n      const metadata = yield firstValueFrom(http.get(url, {\n        headers,\n        responseType: 'json'\n      }));\n      return metadata;\n    })();\n  }\n  static loadTextureBlob(token, url, http) {\n    return _asyncToGenerator(function* () {\n      // Load the texture as a Blob\n      const get_url = `http://localhost:8080/textures/files/${url}`;\n      const bearer = token;\n      const headers = {\n        Authorization: `Bearer ${bearer}`\n      };\n      const textureBlob = yield firstValueFrom(http.get(get_url, {\n        headers,\n        responseType: 'blob'\n      }));\n      return textureBlob;\n    })();\n  }\n  static parseTextureBlob(blob) {\n    return _asyncToGenerator(function* () {\n      const loader = new THREE.TextureLoader();\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const imageUrl = reader.result;\n          // Load texture from the Blob URL\n          loader.load(imageUrl, texture => {\n            resolve(texture); // Resolve with the loaded texture\n          }, undefined, error => {\n            console.error(error);\n            reject(error); // Reject if there is an error during loading\n          });\n        };\n        reader.onerror = error => {\n          console.error(error);\n          reject(error); // Reject if there is an error in reading the file\n        };\n        reader.readAsDataURL(blob); // Read the blob as a data URL for texture loading\n      });\n    })();\n  }\n}","map":{"version":3,"names":["firstValueFrom","THREE","ModelThreeDObject","GLTFLoader","ModelHandler","getModelMetadata","token","id","http","_asyncToGenerator","url","bearer","headers","Authorization","blob","get","responseType","loadModel","get_url","parseGLBFile","loader","Promise","resolve","reject","reader","FileReader","onload","arrayBuffer","result","parse","gltf","gltfScene","scene","chair","fromGLTF","parentDS","pivot","error","console","onerror","readAsArrayBuffer","TextureHandler","getTextureMetadata","metadata","loadTextureBlob","textureBlob","parseTextureBlob","TextureLoader","imageUrl","load","texture","undefined","readAsDataURL"],"sources":["C:\\Users\\v-zacharyhe\\Documents\\GitHub\\eventhub\\frontend\\src\\app\\services\\modelsHandler.ts"],"sourcesContent":["import { firstValueFrom } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport * as THREE from 'three';\r\nimport { ModelThreeDObject } from \"../test/3dobjects\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\r\nimport { AssetModel, AssetTexture } from \"../interfaces\";\r\n\r\nexport class ModelHandler {\r\n    public static async getModelMetadata(token: string, id: number, http: HttpClient) : Promise<AssetModel> {\r\n        // TODO: Load model from server\r\n        const url = `http://localhost:8080/models/${id}`;\r\n        // bearer token\r\n        const bearer = token;\r\n\r\n        const headers = { Authorization: `Bearer ${bearer}` };\r\n\r\n        const blob = await firstValueFrom(http.get<AssetModel>(url, { headers, responseType: 'json' }));\r\n\r\n        return blob;\r\n    }\r\n\r\n    public static async loadModel(token: string, url: string, http: HttpClient) : Promise<Blob> {\r\n        // Load the model\r\n\r\n        const get_url = `http://localhost:8080/models/files/model/${url}`;\r\n\r\n        const bearer = token;\r\n\r\n        const headers = { Authorization: `Bearer ${bearer}` };\r\n\r\n        const blob = await firstValueFrom(http.get(get_url, { headers, responseType: 'blob' }));\r\n\r\n        return blob;\r\n    }\r\n\r\n    public static async parseGLBFile(blob: Blob): Promise<THREE.Object3D> {\r\n        const loader = new GLTFLoader();\r\n    \r\n        return new Promise<THREE.Object3D>((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            \r\n            reader.onload = () => {\r\n                const arrayBuffer = reader.result as ArrayBuffer;\r\n    \r\n                loader.parse(arrayBuffer, '', (gltf) => {\r\n                    const gltfScene = gltf.scene;\r\n                    const chair: ModelThreeDObject = ModelThreeDObject.fromGLTF(gltfScene, true);\r\n                    const parentDS = chair.pivot;\r\n\r\n                    // move to the 0 position.\r\n                    //parentDS.position.y = 1.4;\r\n                    \r\n                    resolve(parentDS); // Resolve with the THREE.Object3D\r\n                },\r\n                (error) => {\r\n                    console.error(error);\r\n                    reject(error); // Reject if there is an error during parsing\r\n                });\r\n            };\r\n    \r\n            reader.onerror = (error) => {\r\n                console.error(error);\r\n                reject(error); // Reject if there is an error in reading the file\r\n            };\r\n\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n}\r\n\r\nexport class TextureHandler {\r\n    public static async getTextureMetadata(token: string, id: number, http: HttpClient): Promise<AssetTexture> {\r\n        // TODO: Load texture metadata from the server\r\n        const url = `http://localhost:8080/textures/${id}`;\r\n        const bearer = token;\r\n\r\n        const headers = { Authorization: `Bearer ${bearer}` };\r\n\r\n        const metadata = await firstValueFrom(http.get<AssetTexture>(url, { headers, responseType: 'json' }));\r\n\r\n        return metadata;\r\n    }\r\n\r\n    public static async loadTextureBlob(token: string, url: string, http: HttpClient): Promise<Blob> {\r\n        // Load the texture as a Blob\r\n        const get_url = `http://localhost:8080/textures/files/${url}`;\r\n        const bearer = token;\r\n\r\n        const headers = { Authorization: `Bearer ${bearer}` };\r\n\r\n        const textureBlob = await firstValueFrom(http.get(get_url, { headers, responseType: 'blob' }));\r\n\r\n        return textureBlob;\r\n    }\r\n\r\n    public static async parseTextureBlob(blob: Blob): Promise<THREE.Texture> {\r\n        const loader = new THREE.TextureLoader();\r\n\r\n        return new Promise<THREE.Texture>((resolve, reject) => {\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = () => {\r\n                const imageUrl = reader.result as string;\r\n\r\n                // Load texture from the Blob URL\r\n                loader.load(\r\n                    imageUrl,\r\n                    (texture) => {\r\n                        resolve(texture); // Resolve with the loaded texture\r\n                    },\r\n                    undefined,\r\n                    (error) => {\r\n                        console.error(error);\r\n                        reject(error); // Reject if there is an error during loading\r\n                    }\r\n                );\r\n            };\r\n\r\n            reader.onerror = (error) => {\r\n                console.error(error);\r\n                reject(error); // Reject if there is an error in reading the file\r\n            };\r\n\r\n            reader.readAsDataURL(blob); // Read the blob as a data URL for texture loading\r\n        });\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}